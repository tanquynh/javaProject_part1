package ra.views;

import ra.config.InputMethods;
import ra.config.Validate;
import ra.model.User;
import ra.service.*;

import java.time.LocalDate;
import java.util.List;

import static ra.config.ConsoleColor.*;
import static ra.config.InputMethods.*;
import static ra.config.Until.formattedPhoneNumber;
import static ra.config.Validate.isValidFullName;
import static ra.config.Validate.isValidPassword;
import static ra.contant.Contant.ADMIN_CODE;
import static ra.contant.Contant.Importance.BLOCK;
import static ra.contant.Contant.Importance.OPEN;
import static ra.contant.Contant.Role.ADMIN;
import static ra.contant.Contant.Status.ONLINE;


public class UserViews {

    private UserService userService;
    private ProductService productService;
    private OrderService orderService;
    private CategoryService categoryService;

    public UserViews() {

        this.userService = new UserService();
        this.productService = new ProductService();
        this.orderService = new OrderService();
        this.categoryService = new CategoryService();
    }

    static String userName;


    public void loginOrRegister() {
        print(BLUE);


        System.out.println("                                         .-------------------------------------------------------------------------------.");
        System.out.println("                                         |        ·É¶ ·É¶ (¬Ø`‚óï‚Äø‚óï¬¥¬Ø) ·É¶ ·É¶       C·ª¨A H√ÄNG KARA       ·É¶ ·É¶ (¬Ø`‚óï‚Äø‚óï¬¥¬Ø) ·É¶ ·É¶         |");
        System.out.println("                                         |-------------------------------------------------------------------------------|");
        System.out.println("                                         |                                                                               |");
        System.out.println("                                         |                                 1. ƒêƒÇNG NH·∫¨P                                  |");
        System.out.println("                                         |                                 2. ƒêƒÇNG K√ù                                    |");
        System.out.println("                                         |                                 0. THO√ÅT                                      |");
        System.out.println("                                         |                                                                               |");
        System.out.println("                                         '-------------------------------------------------------------------------------'\n");


        System.out.print("Nh·∫≠p v√†o l·ª±a ch·ªçn c·ªßa b·∫°n üß°üß° :   ");
        int choice = InputMethods.getInteger();
        switch (choice) {
            case 1:
                User user = login();
                break;
            case 2:
                User user1 = registerUser();
                userService.save(user1);
                printlnSuccess("ƒêƒÉng k√Ω th√†nh c√¥ng !");
                loginOrRegister();
                break;
            case 0:
                break;
        }
    }

    private User registerUser() {
        List<User> users = userService.findAll();
        User user = new User();
        user.setId(userService.autoInc());
        printlnMess("Vui l√≤ng ƒëƒÉng k√Ω t√†i kho·∫£n !!");
        // Ch·ªçn role c·ªßa ng∆∞·ªùi d√πng
        System.out.println("H√£y ch·ªçn role c·ªßa b·∫°n: ");
        System.out.println("1: ADMIN");
        System.out.println("2: USER");
        int role = getInteger();
        if (role == ADMIN) {
            // N·∫øu l√† ADMIN, y√™u c·∫ßu nh·∫≠p m√£ x√°c nh·∫≠n ADMIN
            printlnMess("Nh·∫≠p v√†o m√£ x√°c nh·∫≠n ADMIN: ");
            String adminCode = getString();

            if (!adminCode.equals(ADMIN_CODE)) {
                printlnError("M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng, vui l√≤ng nh·∫≠p l·∫°i.");
                return registerUser(); // G·ªçi l·∫°i ph∆∞∆°ng th·ª©c ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p l·∫°i
            }
        }

        user.setRole(role);

        // Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß
        while (true) {
            System.out.println("H√£y nh√¢p v√†o h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß: ");
            String fullName = InputMethods.scanner().nextLine();

            if (Validate.isValidFullName(fullName)) {
                user.setFullName(fullName);
                break;
            }
        }

        // Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p
        while (true) {
            System.out.println("H√£y nh·∫≠p t√™n ƒëƒÉng nh·∫≠p: ");
            String username = InputMethods.scanner().nextLine();

            if (Validate.isValidFullName(username)) {
                boolean isUsernameAvailable = true;

                if (users != null) {
                    for (User existingUser : users) {
                        if (existingUser.getUsername().trim().equals(username)) {
                            printlnError("T√™n ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, m·ªùi nh·∫≠p t√™n ƒëƒÉng nh·∫≠p m·ªõi.");
                            isUsernameAvailable = false;
                            break;
                        }
                    }
                } else {
                    isUsernameAvailable = false;
                }

                if (isUsernameAvailable) {
                    user.setUsername(username);
                    break; // K·∫øt th√∫c v√≤ng l·∫∑p khi t√™n ƒëƒÉng nh·∫≠p h·ª£p l·ªá v√† kh√¥ng tr√πng l·∫∑p
                }
            }
        }

        // Nh·∫≠p m·∫≠t kh·∫©u
        while (true) {
            System.out.println("H√£y nh·∫≠p v√†o m·∫≠t kh·∫©u: ");
            String password = InputMethods.scanner().nextLine();

            if (Validate.isValidPassword(password)) {
                user.setPassword(password);
                break;
            }
        }

        // Nh·∫≠p email
        while (true) {
            System.out.println("H√£y nh·∫≠p v√†o email ƒëƒÉng k√Ω: ");
            String email = InputMethods.scanner().nextLine();

            if (Validate.isValidEmail(email)) {
                boolean isEmailAvailable = true;

                if (users != null) {
                    for (User existingUser : users) {
                        if (existingUser.getEmail().trim().equals(email)) {
                            printlnError("Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, m·ªùi nh·∫≠p email m·ªõi.");
                            isEmailAvailable = false;
                            break;
                        }
                    }
                } else {
                    isEmailAvailable = false;
                }

                if (isEmailAvailable) {
                    user.setEmail(email);
                    break; // K·∫øt th√∫c v√≤ng l·∫∑p khi email h·ª£p l·ªá v√† kh√¥ng tr√πng l·∫∑p
                }
            }
        }

        // Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i
        while (true) {
            System.out.println("H√£y nh·∫≠p v√†o s·ªë ƒëi·ªán tho·∫°i: ");
            String phone = InputMethods.scanner().nextLine();

            if (Validate.isValidPhone(phone)) {
                boolean isPhoneAvailable = true;
                if (users != null) {
                    for (User existingUser : userService.findAll()) {
                        if (existingUser.getPhone().trim().equals(phone)) {
                            printlnError("S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, m·ªùi nh·∫≠p s·ªë ƒëi·ªán tho·∫°i m·ªõi.");
                            isPhoneAvailable = false;
                            break;
                        }
                    }
                } else {
                    isPhoneAvailable = false;
                }

                if (isPhoneAvailable) {
                    user.setPhone(phone);
                    break; // K·∫øt th√∫c v√≤ng l·∫∑p khi s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá v√† kh√¥ng tr√πng l·∫∑p
                }
            }
        }

        // Nh·∫≠p ƒë·ªãa ch·ªâ
        while (true) {
            System.out.println("H√£y nh·∫≠p v√†o ƒë·ªãa ch·ªâ: ");
            String address = InputMethods.scanner().nextLine();

            if (Validate.isValidAddress(address)) {
                user.setAddress(address);
                break;
            }
        }
        user.setCreateAt(LocalDate.now());

        // ƒêƒÉng k√Ω ho√†n th√†nh, tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng User ƒë√£ t·∫°o
        return user;
    }

    private User login() {
        String pass;
        String userName;
        printlnMess("Th·ª±c hi·ªán ƒëƒÉng nh·∫≠p üß°üòç:");
        while (true) {
            System.out.print("UserName: ");
            userName = getString();
            if (isValidFullName(userName)) {
                break;
            }
        }
        while (true) {
            System.out.print("Password: ");
            pass = scanner().nextLine();
            if (isValidPassword(pass)) {
                break;
            }
        }
        User user;
        user = userService.login(userName, pass);

        if (user != null) {
            if (user.isImportance()) {
                userService.setStatusLogin(userName, ONLINE);
                if (user.getRole() == ADMIN) {

                    displayAdminMenu();

                } else {
                   new MenuViews().displayUserMenuProduct();
                }

            } else {
                printlnError("T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥aüòÇüòÇ !!");
                loginOrRegister();
            }


        } else {
            printlnError("ƒêƒÉng nh·∫≠p th·∫•y b·∫°i,M·∫≠t kh·∫©u ho·∫∑c UserName ko tr√πng h·ª£p!!! ");
            loginOrRegister();

        }
        return user;
    }


    public void logout() {
        System.err.println("B·∫°n ch·∫Øc ch·∫Øn mu·ªën tho√°t ch·ª© ??");
        System.err.println("1. C√≥                2.Kh√¥ng");
        int choice = InputMethods.getInteger();
        if (choice == 1) {
//            userService.setStatusLogin(userName, INACTIVE);
            loginOrRegister();
        }
    }

    public void displayAdminMenu() {
        int choice;
        do {
            print(PURPLE);

            System.out.println(".--------------------------------------------------------.");
            System.out.println("| WELCOME ADMIN : "+ userService.userActive().getUsername()+"                                  |");
            System.out.println("|--------------------------------------------------------|");
            System.out.println("|                     1. QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG              |");
            System.out.println("|                     2. QU·∫¢N L√ù DANH M·ª§C                |");
            System.out.println("|                     3. QU·∫¢N L√ù S·∫¢N PH·∫®M                |");
            System.out.println("|                     4. QU·∫¢N L√ù ƒê∆†N H√ÄNG                |");
            System.out.println("|                     0. ƒêƒÇNG XU·∫§T                       |");
            System.out.println("'--------------------------------------------------------'\n");
            System.out.println("Nh·∫≠p v√†o l·ª±a ch·ªçn c·ªßa b·∫°n üß°üß° :   ");
            printFinish();

            choice = getInteger();
            switch (choice) {
                case 1:
                    userManagement();
                    break;

                case 2:
                    new CategoryView().displayAdminCategory();
                    break;
                case 3:
                    new MenuViews().displayMenuAdminMenuProduct();
                    break;
                case 4:
                    new OrderView().menuAdminOrder();
                    break;
                case 0:
                    logout();
                    break;
                default:
                    break;
            }
        } while (choice != 7);
    }

    private void userManagement() {
        int choice;

        do {
            print(CYAN);

            System.out.println(".--------------------------------------------------------.");
            System.out.println("|           üß°üß°        QU·∫¢N L√ù USER        üß°üß°        |");
            System.out.println("|--------------------------------------------------------|");
            System.out.println("|                     1. DANH S√ÅCH USER                  |");
            System.out.println("|                     2. T√åM KI·∫æM USER THEO T√äN          |");
            System.out.println("|                     3. KH√ìA / M·ªû T√ÄI KHO·∫¢N USER        |");
            System.out.println("|                     4. QUAY L·∫†I MENU TR∆Ø·ªöC             |");
            System.out.println("|                     0. ƒêƒÇNG XU·∫§T                       |");
            System.out.println("'--------------------------------------------------------'\n");
            System.out.println("Nh·∫≠p v√†o l·ª±a ch·ªçn c·ªßa b·∫°n üß°üß° : ");
            choice = getInteger();
            printFinish();

            switch (choice) {
                case 1:
                    displayUserList();
                    break;
                case 2:
                    displayUserByUserName();
                    break;
                case 3:
                    changeUserImportance();
                    break;
                case 4:
                    return;
                case 0:
                    logout();
                    break;
                default:
                    break;
            }
        } while (true);
    }

    private void changeUserImportance() {
        System.out.println("H√£y nh·∫≠p username b·∫°n mu·ªën thay ƒë·ªïi tr·∫°ng th√°i:");
        String username = getString();
        User user = userService.getUserByUsename(username);
        if (user == null) {
            System.err.println("Kh√¥ng t√¨m th·∫•y username b·∫°n mu·ªën ƒë·ªïi tr·∫°ng th√°i !!\"");

        } else {
            if (user.getRole() == ADMIN) {
                printlnError("Kh√¥ng th·ªÉ kh√≥a user ADMIN !!");
            } else {
                userService.updateImportance((user.isImportance() == OPEN ? BLOCK : OPEN), username);
                printlnSuccess("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!");
            }
        }
    }

    private void displayUserByUserName() {
        System.out.println("Nh·∫≠p v√†o t√™n User c·∫ßn t√¨m ki·∫øm");
        String username = getString();
        List<User> fitterUsers = userService.getFitterUsers(username);
        if (fitterUsers.size() != 0) {
            print(GREEN);
            System.out.println("\n                                                  DANH S√ÅCH USER THEO NAME                  ");
            System.out.println("|--------------------------------------------------------------------------------------------------------------------------------|");
            System.out.println("|" + "  ID  |   NAME  |       EMAIL      |     PHONE    |    ƒê·ªäA CH·ªà   |   STATUS  |  ROLE | IMPORTANCE |  CREATE AT  |    UPDATE AT  " + "|");
            System.out.println("|--------------------------------------------------------------------------------------------------------------------------------|");

            for (User user : fitterUsers) {
                System.out.printf("|%-5d | %-7s | %-16s | %-12s | %-12s | %-9s | %-5s | %-10s | %-11s | %-13s |%n",
                        user.getId(), user.getUsername(), user.getEmail(), formattedPhoneNumber(user.getPhone()), user.getAddress(), (user.isStatus() ? "ONLINE" : "OFFLINE"), (user.getRole() == 1 ? "ADMIN" : "USER"), user.isImportance() ? "OPEN" : "BLOCK", user.getCreateAt(), (user.getUpdateAt()) == null ? "Ch∆∞a c·∫≠p nh·∫≠t" : user.getUpdateAt());
            }
            System.out.println("|--------------------------------------------------------------------------------------------------------------------------------|");
            printFinish();
        } else {
            printlnError("Kh√¥ng c√≥ user ph√π h·ª£p!!");

        }
    }

    private void displayUserList() {
        List<User> sortUsers = userService.getSortUsersList();
        if (sortUsers.size() != 0) {

            print(GREEN);
            System.out.println("\n                                                   DANH S√ÅCH USER S·∫ÆP X·∫æP THEO NAME                  ");
            System.out.println("|--------------------------------------------------------------------------------------------------------------------------------|");
            System.out.println("|" + "  ID  |   NAME  |       EMAIL      |     PHONE    |    ƒê·ªäA CH·ªà   |   STATUS  |  ROLE | IMPORTANCE |  CREATE AT  |    UPDATE AT  " + "|");
            System.out.println("|--------------------------------------------------------------------------------------------------------------------------------|");

            for (User user : sortUsers) {
                System.out.printf("|%-5d | %-7s | %-16s | %-12s | %-12s | %-9s | %-5s | %-10s | %-11s | %-13s |%n",
                        user.getId(), user.getUsername(), user.getEmail(), formattedPhoneNumber(user.getPhone()), user.getAddress(), (user.isStatus() ? "ONLINE" : "OFFLINE"), (user.getRole() == 1 ? "ADMIN" : "USER"), user.isImportance() ? "OPEN" : "BLOCK", user.getCreateAt(), (user.getUpdateAt()) == null ? "Ch∆∞a c·∫≠p nh·∫≠t" : user.getUpdateAt());
            }
            System.out.println("|--------------------------------------------------------------------------------------------------------------------------------|");
            printFinish();
        } else {
            printlnError("Kh√¥ng c√≥ user !!");

        }

    }
}


