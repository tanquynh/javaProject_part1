package ra.views;


import ra.config.Validate;
import ra.model.Cart;
import ra.model.Category;
import ra.model.Product;
import ra.model.User;
import ra.service.*;

import java.util.ArrayList;
import java.util.List;

import static ra.config.ConsoleColor.*;
import static ra.config.InputMethods.*;
import static ra.contant.Contant.CategoryStatus.HIDE;
import static ra.contant.Contant.CategoryStatus.UNHIDE;


public class CategoryView {
    private UserViews userViews;
    private UserService userService;
    private CartService cartService;
    private ProductService productService;
    private OrderService orderService;
    private CategoryService categoryService;

    public CategoryView() {
        this.userViews = new UserViews();
        this.userService = new UserService();
        this.cartService = new CartService();
        this.productService = new ProductService();
        this.orderService = new OrderService();
        this.categoryService = new CategoryService();
    }


    public void displayAdminCategory() {
        int choice;

        do {

            print(YELLOW);

            System.out.println(".-----------------------------------------------------------.");
            System.out.println("|                            ADMIN-CATEGORY                 |");
            System.out.println("|-----------------------------------------------------------|");
            System.out.println("|                     1. TH√äM M·ªöI DANH M·ª§C                  |");
            System.out.println("|                     2. DANH S√ÅCH DANH M·ª§C                 |");
            System.out.println("|                     3. T√åM KI·∫æM DANH M·ª§C THEO T√äN         |");
            System.out.println("|                     4. CH·ªàNH S·ª¨A TH√îNG TIN DANH MUC       |");
            System.out.println("|                     5. ·∫®N / HI·ªÜN DANH M·ª§C                 |");
            System.out.println("|                     6. ·∫®N / HI·ªÜN NHI·ªÄU DANH M·ª§C           |");
            System.out.println("|                     7. QUAY L·∫†I MENU TR∆Ø·ªöC                |");
            System.out.println("|                     0. ƒêƒÇNG XU·∫§T                          |");
            System.out.println("'-----------------------------------------------------------'");
            System.out.println("Nh·∫≠p v√†o l·ª±a ch·ªçn c·ªßa b·∫°n üß°üß° : ");
            printFinish();

            choice = getInteger();

            switch (choice) {
                case 1:
                    addCategory();
                    break;
                case 2:
                    displayAllCategorys();
                    break;
                case 3:
                    searchCategoryByName();
                    break;
                case 4:
                    editCategory();
                    break;
                case 5:
                    hideCategory();
                    break;
                case 6:
                    hideAllCategory();
                    break;
                case 7:
                    return;
                case 0:
                    if (userViews != null) {
                        userViews.logout();
                    }
                    break;
                default:
                    break;
            }

        } while (true);

    }

    private void hideAllCategory() {
        List<Category> categories = categoryService.findAll();
        List<User> users = userService.findAll();
        System.out.println("Nh·∫≠p danh s√°ch m√£ danh m·ª•c c·∫ßn ·∫©n/hi·ªán (c√°ch nhau b·∫±ng d·∫•u ph·∫©y):");
        String inputIds = scanner().nextLine();

        // T√°ch danh s√°ch m√£ danh m·ª•c th√†nh m·∫£ng c√°c ID
        String[] idStrings = inputIds.split(",");
        boolean anyChanges = false;

        for (String idString : idStrings) {
            try {
                int idCategory = Integer.parseInt(idString);
                Category category = categoryService.findById(idCategory);

                if (category == null) {
                    System.err.println("ID " + idCategory + " kh√¥ng t·ªìn t·∫°i.");

                } else {
                    boolean isChange = false;
                    for (User user : users) {
                        for (Cart cart : user.getCart()) {
                            if (cart.getProduct().getCategory().getId().equals(idCategory)) {
                                isChange = true;
                                break;  // Tho√°t kh·ªèi v√≤ng l·∫∑p khi s·∫£n ph·∫©m ƒë∆∞·ª£c t√¨m th·∫•y trong gi·ªè h√†ng
                            }
                        }
                        if (isChange) {
                            System.err.println("ID s·∫£n ph·∫©m: " + idCategory + " c√≥ trong gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng " + user.getUsername() + ", n√™n kh√¥ng th·ªÉ ·∫©n s·∫£n ph·∫©m");
                            break;  // Tho√°t kh·ªèi v√≤ng l·∫∑p ng∆∞·ªùi d√πng khi s·∫£n ph·∫©m ƒë∆∞·ª£c t√¨m th·∫•y trong gi·ªè h√†ng
                        }
                    }
                    if (!isChange) {
                        boolean newStatus = (category.isCategoryStatus() == HIDE) ? UNHIDE : HIDE;
                        categoryService.updateCategoryStatus(newStatus, idCategory);
                        anyChanges = true;
                        System.out.println("ID danh m·ª•c: " + idCategory + " Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!");
                    }

                }
            } catch (NumberFormatException e) {
                System.err.println("L·ªói: " + idString + " kh√¥ng ph·∫£i l√† m·ªôt s·ªë nguy√™n h·ª£p l·ªá.");
            }
        }

        if (anyChanges) {
            printlnSuccess("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!");
            // L∆∞u tr·∫°ng th√°i c·ªßa danh m·ª•c sau khi thay ƒë·ªïi

        }
    }

    private void hideCategory() {
        List<User> users = userService.findAll();
        boolean isChange = false;
        System.out.println("H√£y nh·∫≠p id Category b·∫°n mu·ªën thay ƒë·ªïi tr·∫°ng th√°i:");
        int idCategory = getInteger();
        Category category = categoryService.findById(idCategory);
        if (category == null) {
            printlnError("Kh√¥ng t√¨m th·∫•y category b·∫°n mu·ªën ƒë·ªïi tr·∫°ng th√°i !!");
        } else {
            for (User user : users
            ) {
                for (Cart cart : user.getCart()) {
                    if (cart.getProduct().getCategory().getId().equals(idCategory)) {
                        isChange = true;
                    }
                }
            }
            if (isChange) {
                printlnError("S·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng, n√™n kh√¥ng th·ªÉ ·∫©n Category");
            } else {

                categoryService.updateCategoryStatus((category.isCategoryStatus() == HIDE ? UNHIDE : HIDE), idCategory);
                printlnSuccess("Thay ƒë·ªïi tr·∫°ng th√°i th√†nh c√¥ng!");
            }
        }
    }

    private void editCategory() {
        boolean isNameExists = true;
        System.out.println("Nh·∫≠p v√†o id danh m·ª•c c·∫ßn s·ª≠a: ");
        int id = getInteger();
        List<Category> allCategory = categoryService.findAll();

        int index = categoryService.findIndex(id);
        if (index != -1) {
            Category categoryToEdit = new Category();
            categoryToEdit.setId(id);
            System.out.println("H√£y nh·∫≠p t√™n danh m·ª•c m·ªõi: (Enter ƒë·ªÉ b·ªè qua)");
            while (true) {
                String newName = scanner().nextLine();
                if (newName.isEmpty()) {
                    categoryToEdit.setCategoryName(categoryService.findById(id).getCategoryName());
                    break;
                } else if (Validate.isValidFullName(newName)) {
                    boolean isUsernameAvailable = true;
                    if (allCategory != null) {
                        for (Category category : allCategory) {
                            if (category.getCategoryName().trim().equals(newName)) {
                                printlnError("T√™n danh m·ª•c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, m·ªùi nh·∫≠p t√™n danh m·ª•c m·ªõi m·ªõi.");
                                isUsernameAvailable = false;
                            }
                        }
                    } else {
                        isUsernameAvailable = false;
                    }

                    if (isUsernameAvailable) {
                        categoryToEdit.setCategoryName(newName);
                        break; // K·∫øt th√∫c v√≤ng l·∫∑p khi t√™n ƒëƒÉng nh·∫≠p h·ª£p l·ªá v√† kh√¥ng tr√πng l·∫∑p
                    }
                }
            }


            //
            System.out.println("Nh·∫≠p v√†o m√¥ t·∫£ danh m·ª•c m·ªõi (Enter ƒë·ªÉ b·ªè qua):");
            while (true) {
                String newDes = scanner().nextLine();
                if (!newDes.isEmpty()) {
                    categoryToEdit.setCategoryDes(newDes);
                    break;
                } else {
                    categoryToEdit.setCategoryDes(categoryService.findById(id).getCategoryDes());
                    break;
                }
            }
            categoryToEdit.setCategoryStatus(UNHIDE);
            categoryService.save(categoryToEdit);
            List<Product> products = productService.findAll();
            List<User> users = userService.findAll();
            int idProduct = -1;
            Product newProduct = new Product();

            for (int i = 0; i < products.size(); i++) {

                if (products.get(i).getCategory().getId().equals(id)) {
                    products.get(i).setCategory(categoryToEdit);
                    newProduct = products.get(i);
                    productService.save(newProduct);
                    idProduct = (int) products.get(i).getId();
                }
            }
            List<Cart> carts = cartService.findAll();
            Cart newCart = new Cart();
            for (int i = 0; i < carts.size(); i++) {
                if (carts.get(i).getProduct().getId().equals(idProduct)) {
                    carts.get(i).setProduct(newProduct);
                    newCart = carts.get(i);
                    cartService.save(newCart);
                }
            }

        } else {
            printlnError("Kh√¥ng t√¨m th·∫•y m√£ danh m·ª•c c·∫ßn s·ª≠a !!!");
        }
    }


    private void searchCategoryByName() {
        System.out.println("Nh·∫≠p t√™n danh m·ª•c mu·ªën t√¨m ki·∫øm");
        String searchName = getString();
        List<Category> categories = categoryService.findAll();
        List<Category> category = new ArrayList<>();
        boolean flag = false;
        for (Category cate : categories) {
            if (cate.getCategoryName().contains(searchName.trim())) {
                category.add(cate);
                flag = true;
            }
        }
        if (flag) {
            print(GREEN);
            System.out.println("\n            DANH S√ÅCH CATEGORY THEO T√äN              ");
            System.out.println("|-------------------------------------------------------------|");
            System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |   STATUS " + " |");
            System.out.println("|-------------------------------------------------------------|");

            for (Category catalog : category) {
                System.out.printf("|%-5d | %-17s | %-20s | %-9s |%n",
                        catalog.getId(), catalog.getCategoryName(), catalog.getCategoryDes(), (catalog.isCategoryStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
            }
            System.out.println("|-------------------------------------------------------------|");
            printFinish();
        } else {
            System.err.println("Kh√¥ng t√¨m th·∫•y danh m·ª•c ph√π h·ª£p");
        }
    }

    private void displayAllCategorys() {
        List<Category> categories = categoryService.findAll();
        if (categories.isEmpty()) {
            System.err.println("Danh s√°ch Category r·ªóng");
        } else {
            print(GREEN);
            System.out.println("\n                    DANH S√ÅCH CATEGORY                 ");
            System.out.println("|-------------------------------------------------------------|");
            System.out.println("|" + "  ID  |       NAME        |      DESCRIPTION     |   STATUS " + " |");
            System.out.println("|-------------------------------------------------------------|");

            for (Category category : categories) {
                System.out.printf("|%-5d | %-17s | %-20s | %-9s |%n",
                        category.getId(), category.getCategoryName(), category.getCategoryDes(), (category.isCategoryStatus() ? "ƒêANG B√ÅN" : "T·∫†M D·ª™NG"));
            }
            System.out.println("|-------------------------------------------------------------|");
            printFinish();
        }
    }

    private void addCategory() {
        System.out.println("Nh·∫≠p s·ªë danh m·ª•c c·∫ßn th√™m m·ªõi");
        int numberOfCategories = getInteger();
        if (numberOfCategories <= 0) {
            printlnError("S·ªë danh m·ª•c ph·∫£i l·ªõn h∆°n 0");
            return;
        }
        for (int i = 0; i < numberOfCategories; i++) {
            List<Category> categories = categoryService.findAll();
            System.out.println("Danh m·ª•c th·ª© " + (i + 1));
            Category category = new Category();

            // Nh·∫≠p t√™n danh m·ª•c v√† ki·ªÉm tra xem t√™n ƒë√£ t·ªìn t·∫°i ch∆∞a
            while (true) {
                System.out.println("Nh·∫≠p t√™n danh m·ª•c");
                String categoryName = getString();
                boolean isNameExists = false;
                for (Category cate : categories) {
                    if (cate.getCategoryName().equalsIgnoreCase(categoryName)) {
                        isNameExists = true;
                        System.err.println("T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i, m·ªùi nh·∫≠p t√™n m·ªõi.");
                        break;
                    }
                }
                if (!isNameExists) {
                    category.setCategoryName(categoryName);
                    break; // K·∫øt th√∫c v√≤ng l·∫∑p khi t√™n h·ª£p l·ªá v√† kh√¥ng tr√πng l·∫∑p
                }

            }
            System.out.println("Nh·∫≠p m√¥ t·∫£ danh m·ª•c:");
            String categoryDes = getString();
            category.setCategoryDes(categoryDes);
            category.setCategoryStatus(UNHIDE);
            category.setId(categoryService.autoInc());
            categoryService.save(category);

        }
        System.out.println("T·∫°o category th√†nh c√¥ng");
    }


}

